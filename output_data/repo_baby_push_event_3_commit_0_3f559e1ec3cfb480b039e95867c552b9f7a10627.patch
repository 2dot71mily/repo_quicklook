From 3f559e1ec3cfb480b039e95867c552b9f7a10627 Mon Sep 17 00:00:00 2001
From: emily <emily.mcmilin@gmail.com>
Date: Sun, 25 Aug 2024 21:22:23 -0700
Subject: [PATCH] add logistic regression

---
 logistic_regression.py | 34 ++++++++++++++++++++++++++++++++++
 1 file changed, 34 insertions(+)
 create mode 100644 logistic_regression.py

diff --git a/logistic_regression.py b/logistic_regression.py
new file mode 100644
index 0000000..f0ff071
--- /dev/null
+++ b/logistic_regression.py
@@ -0,0 +1,34 @@
+import numpy as np
+
+class LogisticRegression:
+    def __init__(self, learning_rate=0.01, num_iterations=1000):
+        self.learning_rate = learning_rate
+        self.num_iterations = num_iterations
+        self.weights = None
+        self.bias = None
+
+    def sigmoid(self, z):
+        return 1 / (1 + np.exp(-z))
+
+    def fit(self, X, y):
+        num_samples, num_features = X.shape
+        self.weights = np.zeros(num_features)
+        self.bias = 0
+
+        for _ in range(self.num_iterations):
+            linear_model = np.dot(X, self.weights) + self.bias
+            y_predicted = self.sigmoid(linear_model)
+
+            dw = (1 / num_samples) * np.dot(X.T, (y_predicted - y))
+            db = (1 / num_samples) * np.sum(y_predicted - y)
+
+            self.weights -= self.learning_rate * dw
+            self.bias -= self.learning_rate * db
+
+    def predict(self, X):
+        linear_model = np.dot(X, self.weights) + self.bias
+        y_predicted = self.sigmoid(linear_model)
+        return [1 if i > 0.5 else 0 for i in y_predicted]
+
+    def accuracy(self, y_true, y_pred):
+        return np.sum(y_true == y_pred) / len(y_true)
\ No newline at end of file
