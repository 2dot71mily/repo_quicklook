From e8e3e3560a80eecc68ab5439fc67d82030ba0083 Mon Sep 17 00:00:00 2001
From: Emily McMilin <emily.mcmilin@gmail.com>
Date: Sun, 25 Aug 2024 21:33:06 -0700
Subject: [PATCH] add workflow (#7)

* add workflow

* add logistic regression

* add test logistic regression

* add e2e

* add e2e test
---
 .github/workflows/python-app.yml | 39 +++++++++++++++++++++++++++
 e2e_logistic_regression.py       | 46 ++++++++++++++++++++++++++++++++
 logistic_regression.py           | 34 +++++++++++++++++++++++
 test_e2e_logistic_regression.py  |  6 +++++
 test_logistic_regression.py      | 33 +++++++++++++++++++++++
 5 files changed, 158 insertions(+)
 create mode 100644 .github/workflows/python-app.yml
 create mode 100644 e2e_logistic_regression.py
 create mode 100644 logistic_regression.py
 create mode 100644 test_e2e_logistic_regression.py
 create mode 100644 test_logistic_regression.py

diff --git a/.github/workflows/python-app.yml b/.github/workflows/python-app.yml
new file mode 100644
index 0000000..1168bd9
--- /dev/null
+++ b/.github/workflows/python-app.yml
@@ -0,0 +1,39 @@
+# This workflow will install Python dependencies, run tests and lint with a single version of Python
+# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
+
+name: Python application
+
+on:
+  push:
+    branches: [ "main" ]
+  pull_request:
+    branches: [ "main" ]
+
+permissions:
+  contents: read
+
+jobs:
+  build:
+
+    runs-on: ubuntu-latest
+
+    steps:
+    - uses: actions/checkout@v4
+    - name: Set up Python 3.10
+      uses: actions/setup-python@v3
+      with:
+        python-version: "3.10"
+    - name: Install dependencies
+      run: |
+        python -m pip install --upgrade pip
+        pip install flake8 pytest
+        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
+    - name: Lint with flake8
+      run: |
+        # stop the build if there are Python syntax errors or undefined names
+        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
+        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
+        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
+    - name: Test with pytest
+      run: |
+        pytest
diff --git a/e2e_logistic_regression.py b/e2e_logistic_regression.py
new file mode 100644
index 0000000..d6a5116
--- /dev/null
+++ b/e2e_logistic_regression.py
@@ -0,0 +1,46 @@
+import numpy as np
+from logistic_regression import LogisticRegression
+
+def generate_sample_data(num_samples=100, num_features=2):
+    np.random.seed(42)
+    X = np.random.randn(num_samples, num_features)
+    y = (X[:, 0] + X[:, 1] > 0).astype(int)
+    return X, y
+
+def run_e2e_test():
+    print("Running end-to-end test for LogisticRegression")
+
+    # Generate sample data
+    X, y = generate_sample_data()
+    print(f"Generated {len(X)} samples with {X.shape[1]} features")
+
+    # Split data into train and test sets
+    split_index = int(0.8 * len(X))
+    X_train, X_test = X[:split_index], X[split_index:]
+    y_train, y_test = y[:split_index], y[split_index:]
+
+    # Initialize and train the model
+    model = LogisticRegression(learning_rate=0.1, num_iterations=1000)
+    model.fit(X_train, y_train)
+    print("Model training completed")
+
+    # Make predictions on the test set
+    y_pred = model.predict(X_test)
+    print("Predictions made on test set")
+
+    # Calculate and print accuracy
+    accuracy = model.accuracy(y_test, y_pred)
+    print(f"Test accuracy: {accuracy:.2f}")
+
+    # Print some sample predictions
+    print("\nSample predictions:")
+    for i in range(min(5, len(y_test))):
+        print(f"True: {y_test[i]}, Predicted: {y_pred[i]}")
+
+    return accuracy
+
+
+if __name__ == "__main__":
+    accuracy = run_e2e_test()
+    assert accuracy > 0.7, f"Test failed: accuracy {accuracy} is below threshold of 0.7"
+    print("End-to-end test passed successfully!")
\ No newline at end of file
diff --git a/logistic_regression.py b/logistic_regression.py
new file mode 100644
index 0000000..f0ff071
--- /dev/null
+++ b/logistic_regression.py
@@ -0,0 +1,34 @@
+import numpy as np
+
+class LogisticRegression:
+    def __init__(self, learning_rate=0.01, num_iterations=1000):
+        self.learning_rate = learning_rate
+        self.num_iterations = num_iterations
+        self.weights = None
+        self.bias = None
+
+    def sigmoid(self, z):
+        return 1 / (1 + np.exp(-z))
+
+    def fit(self, X, y):
+        num_samples, num_features = X.shape
+        self.weights = np.zeros(num_features)
+        self.bias = 0
+
+        for _ in range(self.num_iterations):
+            linear_model = np.dot(X, self.weights) + self.bias
+            y_predicted = self.sigmoid(linear_model)
+
+            dw = (1 / num_samples) * np.dot(X.T, (y_predicted - y))
+            db = (1 / num_samples) * np.sum(y_predicted - y)
+
+            self.weights -= self.learning_rate * dw
+            self.bias -= self.learning_rate * db
+
+    def predict(self, X):
+        linear_model = np.dot(X, self.weights) + self.bias
+        y_predicted = self.sigmoid(linear_model)
+        return [1 if i > 0.5 else 0 for i in y_predicted]
+
+    def accuracy(self, y_true, y_pred):
+        return np.sum(y_true == y_pred) / len(y_true)
\ No newline at end of file
diff --git a/test_e2e_logistic_regression.py b/test_e2e_logistic_regression.py
new file mode 100644
index 0000000..c175f52
--- /dev/null
+++ b/test_e2e_logistic_regression.py
@@ -0,0 +1,6 @@
+from e2e_logistic_regression import run_e2e_test
+
+
+def test_e2e():
+    accuracy = run_e2e_test()
+    assert accuracy > 0.7, f"E2E test failed: accuracy {accuracy} is below threshold of 0.7"
\ No newline at end of file
diff --git a/test_logistic_regression.py b/test_logistic_regression.py
new file mode 100644
index 0000000..56d9f43
--- /dev/null
+++ b/test_logistic_regression.py
@@ -0,0 +1,33 @@
+import unittest
+import numpy as np
+from logistic_regression import LogisticRegression
+
+class TestLogisticRegression(unittest.TestCase):
+    def setUp(self):
+        self.model = LogisticRegression(learning_rate=0.1, num_iterations=1000)
+
+    def test_sigmoid(self):
+        self.assertAlmostEqual(self.model.sigmoid(0), 0.5)
+        self.assertAlmostEqual(self.model.sigmoid(10), 0.9999, places=2)
+        self.assertAlmostEqual(self.model.sigmoid(-10), 0.0001, places=2)
+
+    def test_fit_predict(self):
+        X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])
+        y = np.array([0, 0, 1, 1])
+        
+        self.model.fit(X, y)
+        predictions = self.model.predict(X)
+        
+        self.assertEqual(len(predictions), len(y))
+        self.assertTrue(all(isinstance(pred, int) for pred in predictions))
+        self.assertTrue(all(pred in [0, 1] for pred in predictions))
+
+    def test_accuracy(self):
+        y_true = np.array([0, 1, 1, 0, 1])
+        y_pred = np.array([0, 1, 1, 1, 1])
+        
+        accuracy = self.model.accuracy(y_true, y_pred)
+        self.assertAlmostEqual(accuracy, 0.8)
+
+if __name__ == '__main__':
+    unittest.main()
\ No newline at end of file
